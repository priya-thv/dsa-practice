#include <vector>
#include <map>
#include <iostream>

class Solution {
public:
    int reverse(int num) {
        int reversed = 0;
        while (num > 0) {
            int digit = num % 10;
            reversed = reversed * 10 + digit;
            num /= 10;
        }
        return reversed;
    }

    int countNicePairs(std::vector<int>& nums) {
        std::map<int, int> freqMap;
        for (int i = 0; i < nums.size(); i++) {
            int reversed = reverse(nums[i]);
            int diff = nums[i] - reversed;
            freqMap[diff]++;
        }

        long long nicePairsCount = 0; // Use long long for large counts
        for (auto pair : freqMap) {
            if (pair.second > 1) {
                nicePairsCount += static_cast<long long>(pair.second) * (pair.second - 1) / 2;
            }
        }

        return static_cast<int>(nicePairsCount % 1000000007); // Modulo 10^9 + 7
    }
};
